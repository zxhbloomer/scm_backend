debug: true
#-----------------------tomcat设置---------------------------
server:
  port: 8088
  servlet:
    context-path: /scm
    session:
      cookie:
        name: SCM_SESSION
      timeout: PT2H
  tomcat:
    max-connections: 10000
    accept-count: 1000
    # tomcat的URI编码
    uri-encoding: UTF-8
    threads:
      # tomcat最大线程数，默认为200
      max: 800
      # Tomcat启动初始化的线程数，默认值25
      min-spare: 30
    remoteip:
      remote-ip-header: x-forwarded-for
      protocol-header: x-forwarded-proto

# ===== knife4jDoc配置 =====#
#knife4j:
#  enable: true
#  setting:
#    language: zh-CN
#    enableSwaggerModels: true
#    enableDocumentManage: true
#    swaggerModelName: 实体类列表
#    enableVersion: false
#    enableReloadCacheParameter: false
#    enableAfterScript: true
#    enableFilterMultipartApiMethodType: POST
#    enableFilterMultipartApis: false
#    enableRequestCache: true
#    enableHost: false
#    enableHostText: 192.168.0.193:8000
#    enableHomeCustom: true
#    homeCustomLocation: classpath:markdown/home.md
#    enableSearch: false
#    enableFooter: false
#    enableFooterCustom: true
#    footerCustomContent: Apache License 2.0 | Copyright  2021-[鑫一润]
#    enableDynamicParameter: true
#    enableDebug: true
#    enableOpenApi: false
#    enableGroup: true
#  cors: false
#  production: false
#  basic:
#    enable: false
#    username: test
#    password: 12313
#
#  documents:
#    - group: 文件上传说明
#      name: 文件上传说明----1.0
#      # 某一个文件夹下所有的.md文件
#      locations: classpath:custom_doc/*

#-----------------------spring 设置---------------------------
spring:
  aop:
    proxy-target-class: true
  #  devtools:
  #    livereload:
  #      port: 35730
  #    restart:
  #      enabled: true
  rabbitmq:
    # 服务器ip
    host: 127.0.0.1
    # 端口号
    port: 5672
    username: admin
    password: 123456
    # 配置虚拟主机
    virtual-host: /
    # 连接超时，单位毫秒，0表示无穷大，不超时
    connection-timeout: 3000
    # 开启发送确认
    #    publisher-confirms: true
    publisher-confirm-type: correlated
    # 开启发送失败退回
    publisher-returns: true
    # 缓存设置
    cache:
      channel:
        # 缓存中保持的channel数量
        size: 200
        # 当缓存数量被设置时，从缓存中获取一个channel的超时时间，单位毫秒；如果为0，则总是创建一个新channel
        checkout-timeout: 1000ms
      connection:
        # 缓存的连接数，只有是CONNECTION模式时生效
        size: 10
        # 连接工厂缓存模式：CHANNEL 和 CONNECTION
        mode: CONNECTION

    #回调return,而不是自动删除消息
    template:
      mandatory: true
      retry:
        # 启用发送重试
        enabled: true
        # 最大重试次数
        max-attempts: 3
    ## 消费端配置
    listener:
      simple:
        ## 最大并发数
        concurrency: 5
        ## manual:手动 ack（确认）
        acknowledge-mode: manual
        ##
        max-concurrency: 10
        ## 限流
        prefetch: 1
    # 自定义
    custom:
      # 生产者
      producer:
        has-open: true
        default-exchange: wms-default-exchange
        default-queue: wms-default-queue
        default-routing-key: wms-default-routing-key.#
      # 消费者
      consumer:
        has-open: false
        default-queue: test_queue
  #  profiles:
  #    # 数据库设置x`
  #    active: druid

  session:
    redis:
      flush-mode: ON_SAVE
      namespace: XINYIRUN_SCM_SESSION_REDIS_KEY
    store-type: redis
  mvc:
    dispatch-options-request: true
  servlet:
    # multipart 上传配置
    multipart:
      enabled: true
      max-file-size: 1024MB
      max-request-size: 1024MB
  data:
    # REDIS设置
    redis:
      # Redis数据库索引（默认为0）
      database: 13
      # Redis服务器地址
      host: 127.0.0.1
      # 连接超时时间（毫秒）
      commandtimeout: 10000
      timeout: 5000ms
      lettuce:
        pool:
          # 连接池最大连接数（使用负值表示没有限制）
          max-active: 8
          # 连接池中的最大空闲连接
          max-idle: 8
          # 连接池最大阻塞等待时间（使用负值表示没有限制）
          max-wait: -1
          # 连接池中的最小空闲连接
          min-idle: 0
      # Redis服务器连接密码
      password: ''
      # Redis服务器连接端口
      port: 6379
#      暂时停用：使用clickhouse替代
#    mongodb:
#      host: 127.0.0.1
##      host: 47.100.174.228  # 鑫润航大外网
##      host: 139.196.253.28  # 中林
#      port: 27017
#      database: wms
#      username: wms_db_user
#      password: ScmMongodb123             # 升级成springboot3后，@符号需要修改成%40
  datasource:
    dynamic:
      p6spy: true
    tomcat:
      # 当从连接池借用连接时，是否测试该连接.
      test-on-borrow: false
      # 当连接空闲时，是否执行连接测试
      test-while-idle: true
      # 指定空闲连接检查、废弃连接清理、空闲连接池大小调整之间的操作时间间隔
      time-between-eviction-runs-millis: 18800
    driverClassName: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://127.0.0.1:3306/scm_manager?tinyInt1isBit=true&useUnicode=true&characterEncoding=utf-8&autoReconnect=true&useSSL=false&&allowPublicKeyRetrieval=true&serverTimezone=Asia/Shanghai&&zeroDateTimeBehavior=convertToNull&rewriteBatchedStatements=true
    username: root
    password: 123456
    type: com.alibaba.druid.pool.xa.DruidXADataSource
    tenent_sql: SELECT * FROM s_tenant_manager WHERE status = 0
    druid:
      # 初始化连接大小
      initial-size: 30
      #最大连接池数量
      max-active: 80
      # 最小连接池数量
      min-idle: 20
      # 配置获取连接等待超时的时间 单位毫秒
      max-wait: 60000
      # 连接池中的 minIdle 数据以内的连接，空闲时间超过设置的 最小生存时间时, 会执行 keepAlive 操作。默认 false
      keep-alive: true
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      min-evictable-idle-time-millis: 30000
      # 配置一个连接在池中最大生存的时间，单位是毫秒
      max-evictable-idle-time-millis: 30000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      time-between-eviction-runs-millis: 0
      # 测试连接
      validation-query: select 1
      validation-query-timeout: 10000
      # 获取连接时执行检测，建议关闭，影响性能
      test-on-borrow: false
      # 归还连接时执行检测，建议关闭，影响性能
      test-on-return: false
      # 申请连接的时候检测，建议配置为true，不影响性能，并且保证安全性
      test-while-idle: true
      # 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。
      max-pool-prepared-statement-per-connection-size: 50
      # 打开PSCache，并且指定每个连接上PSCache的大小
      pool-prepared-statements: true
      max-open-prepared-statements: 100
        #      配置监控统计拦截器 防火墙 日志配置
      #      stat监控数据库性能
      #      wall  用于防火墙
      #      日志 slf4j logback
      #      log4j
      #      log4j2
      # 配置多个英文逗号分隔
      filters: stat,wall,log4j
      share-prepared-statements: true
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录 SQL优化
      # connect-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500
      # 公司内网
      master:
        url: jdbc:mysql://106.14.44.59:5002/scm_manager?tinyInt1isBit=true&useUnicode=true&characterEncoding=utf-8&autoReconnect=true&useSSL=false&&allowPublicKeyRetrieval=true&serverTimezone=Asia/Shanghai&&zeroDateTimeBehavior=convertToNull&rewriteBatchedStatements=true
        username: root
        password: Abcd@1234
        type: com.alibaba.druid.pool.xa.DruidXADataSource
        driverClassName: com.mysql.cj.jdbc.Driver
        tenent_sql: SELECT * FROM s_tenant_manager WHERE status = 0
#      slave:
#        url: jdbc:mysql://106.14.44.59:5002/scm?tinyInt1isBit=true&useUnicode=true&characterEncoding=utf-8&autoReconnect=true&useSSL=false&&allowPublicKeyRetrieval=true&serverTimezone=Asia/Shanghai&&zeroDateTimeBehavior=convertToNull&rewriteBatchedStatements=true
#        username: root
#        password: Abcd@1234
#        type: com.alibaba.druid.pool.xa.DruidXADataSource
#        driverClassName: com.mysql.cj.jdbc.Driver
#        druid:
  # 中林生产
#      master:
#        url: jdbc:mysql://rm-uf69hpg7211j6trh7no.mysql.rds.aliyuncs.com:3306/zlwarehouse?tinyInt1isBit=true&useUnicode=true&characterEncoding=utf-8&autoReconnect=true&useSSL=false&&allowPublicKeyRetrieval=true&serverTimezone=Asia/Shanghai&&zeroDateTimeBehavior=convertToNull&rewriteBatchedStatements=true
#        username: zlwarehouse
#        password: abcd@1234
#        type: com.alibaba.druid.pool.xa.DruidXADataSource
#        driverClassName: com.mysql.cj.jdbc.Driver
#        druid:
  # 公司外网映射
  #      master:
  #        url: jdbc:mysql://222.72.35.146:48005/wms_ys?tinyInt1isBit=true&useUnicode=true&characterEncoding=utf-8&autoReconnect=true&useSSL=false&&allowPublicKeyRetrieval=true&serverTimezone=Asia/Shanghai&&zeroDateTimeBehavior=convertToNull&rewriteBatchedStatements=true
  #        username: root
  #        password: Abcd@1234
  #        type: com.alibaba.druid.pool.xa.DruidXADataSource
  #        driverClassName: com.mysql.cj.jdbc.Driver
  #        druid:
  # 鑫润航达生产
#      master:
#        url: jdbc:mysql://rm-uf68ek48x0461832hqo.mysql.rds.aliyuncs.com:3306/xrhdwarehouse?tinyInt1isBit=true&useUnicode=true&characterEncoding=utf-8&autoReconnect=true&useSSL=false&&allowPublicKeyRetrieval=true&serverTimezone=Asia/Shanghai&&zeroDateTimeBehavior=convertToNull&rewriteBatchedStatements=true
#        username: xrhdwarehouse
#        password: abcd@1234
#        type: com.alibaba.druid.pool.xa.DruidXADataSource
#        driverClassName: com.mysql.cj.jdbc.Driver
#        druid:
  # Elasticsearch配置
  elasticsearch:
    uris: http://127.0.0.1:19200
    connection-timeout: 1s
    socket-timeout: 30s
  
  #   OAuth2 Client/Login配置
  security:
    oauth2:
      client:
        registration:
          custom:
            client-id: b78be10c-6bcf-11ec-90d6-0242ac120003
            client-secret: 719d19f0-f27a-4e02-b844-1b5a471eb72a
            provider: custom
            client-name: 自建OAuth2认证服务
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
        provider:
          custom:
            # 远程授权、鉴权的接口
            authorization-uri: http://127.0.0.1:${server.port}${server.servlet.context-path}/api/app/oauth/authorize
            # 获取远程令牌的接口
            token-uri: http://127.0.0.1:${server.port}${server.servlet.context-path}/api/app/oauth/token
            # 获取远程用户信息的接口
            user-info-uri: http://127.0.0.1:${server.port}${server.servlet.context-path}/api/app/me
            # 返回的用户信息里面，name属性是用户名（用户标识符）
            # 由于在授权服务里面返回的收取信息对象中，name属性的值是User对象的id（主键）
            # 所以，得到的user-name其实是id
            user-name-attribute: name
            # 鉴权服务返回的信息是JWT加密的，所以需要通过获取鉴权服务器里面的公钥用于解密
            # RSA 公钥访问地址
            jwk-set-uri: http://localhost:9999/.well-known/jwks.json
      resourceserver:
        jwt:
          # 资源服务器的公钥证书的路径
          jwk-set-uri: http://localhost:9999/.well-known/jwks.json
  quartz:
    job-store-type: jdbc # 默认为内存 memory 的方式，这里我们使用数据库的形式
    wait-for-jobs-to-complete-on-shutdown: true # 关闭时等待任务完成
    overwrite-existing-jobs: true # 可以覆盖已有的任务
    jdbc:
      initialize-schema: never #不初始化表结构
    properties:
      org:
        quartz:
          triggerListener:
            name:
              class: com.xinyirun.scm.quartz.config.listener.SystemTriggerListener
          jobListener:
            name:
              class: com.xinyirun.scm.quartz.config.listener.SystemJobListener
          SchedulerListener:
            name:
              class: com.xinyirun.scm.quartz.config.listener.SystemSchedulerListener
          scheduler:
            instanceName: WmsScheduler
            instanceId: AUTO #默认主机名和时间戳生成实例ID,可以是任何字符串，但对于所有调度程序来说，必须是唯一的 对应qrtz_scheduler_state INSTANCE_NAME字段
            autoStartup: true
            startupDelay: 0
          jobStore:
            class: org.springframework.scheduling.quartz.LocalDataSourceJobStore # springboot>2.5.6后使用这个
            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate #仅为数据库制作了特定于数据库的代理
            useProperties: false #以指示JDBCJobStore将JobDataMaps中的所有值都作为字符串，因此可以作为名称 - 值对存储而不是在BLOB列中以其序列化形式存储更多复杂的对象。从长远来看，这是更安全的，因为您避免了将非String类序列化为BLOB的类版本问题。
            tablePrefix: qrtz_  #数据库表前缀
            misfireThreshold: 60000 #在被认为“失火”之前，调度程序将“容忍”一个Triggers将其下一个启动时间通过的毫秒数。默认值（如果您在配置中未输入此属性）为60000（60秒）。
            clusterCheckinInterval: 5000 #设置此实例“检入”*与群集的其他实例的频率（以毫秒为单位）。影响检测失败实例的速度。
            isClustered: true #打开群集功能
            txIsolationLevelSerializable: true
            acquireTriggersWithinLock: true
          threadPool: #连接池
            class: org.quartz.simpl.SimpleThreadPool
            threadCount: 10
            threadPriority: 5
            threadsInheritContextClassLoaderOfInitializingThread: true
  
  #-----------------------Spring AI配置---------------------------
  ai:
    # 模型配置 - 启用聊天模型自动配置
    model:
      chat: openai  # 启用OpenAI兼容API（用于DeepSeek）
      embedding: none  # 禁用embedding模型自动配置，避免MiniMax等模型自动配置
    
    # 彻底禁用所有Vector Store自动配置
    vector-store:
      enabled: false
    
    # 重试机制配置
    retry:
      max-attempts: 3
      backoff:
        initial-interval: 1000
        multiplier: 2
        max-interval: 10000
    
    # 智谱AI配置
    zhipuai:
      enabled: true   # 启用智谱AI
      api-key: ${ZHIPUAI_API_KEY:your-api-key-here}
      base-url: https://open.bigmodel.cn
      chat:
        options:
          model: glm-4
          temperature: 0.7
          max-tokens: 4096
    
    # 阿里通义千问配置
    dashscope:
      enabled: false  # 开发环境暂时禁用，需要时开启
      api-key: ${DASHSCOPE_API_KEY:your-api-key-here}
      chat:
        options:
          model: qwen-plus
          temperature: 0.7
          max-tokens: 1500
    
    # 百度千帆配置
    baidu:
      enabled: false  # 开发环境暂时禁用，需要时开启
      api-key: ${BAIDU_API_KEY:your-api-key-here}
      secret-key: ${BAIDU_SECRET_KEY:your-secret-key-here}
      chat:
        options:
          model: ERNIE-Bot-4
          temperature: 0.7
    
    # 腾讯混元配置
    tencent:
      enabled: false  # 开发环境暂时禁用，需要时开启
      secret-id: ${TENCENT_SECRET_ID:your-secret-id-here}
      secret-key: ${TENCENT_SECRET_KEY:your-secret-key-here}
      region: ap-beijing
      chat:
        options:
          model: hunyuan-lite
          temperature: 0.7
    
    # Anthropic Claude配置
    anthropic:
      enabled: false  # 开发环境暂时禁用，需要时开启
      api-key: ${ANTHROPIC_API_KEY:your-api-key-here}
      chat:
        enabled: false
        options:
          model: claude-3-opus-20240229
          temperature: 0.7
          max-tokens: 4096
    
    # DeepSeek配置 - 使用OpenAI兼容API
    openai:
      api-key: sk-feaef74368dc48afa672e79d166e1e82  # DeepSeek API密钥
      base-url: https://api.deepseek.com  # DeepSeek API端点
      chat:
        enabled: true
        options:
          model: deepseek-chat  # DeepSeek聊天模型
          temperature: 0.7
          max-tokens: 4096
      embedding:
        enabled: false
    
    # MiniMax配置 - 禁用以避免API密钥错误
    minimax:
      enabled: false
      chat:
        enabled: false
      embedding:
        enabled: false
    
    # 彻底禁用所有向量存储自动配置
    vectorstore:
      enabled: false
      elasticsearch:
        enabled: false
        index-name: scm_ai_vs_index
        dimensions: 1024
      chroma:
        enabled: false
      neo4j:
        enabled: false
      pinecone:
        enabled: false
      redis:
        enabled: false
      typesense:
        enabled: false

logging:
  level:
    org.springframework.web: Debug
    org.springframework.security: DEBUG
    org.springframework.security.oauth2: DEBUG
    org.springframework.boot.autoconfigure: INFO
    org.springframework.session: DEBUG


##mybatis:
##  config-location: classpath:mybatis.xml
#-----------------------RestTemplateConfiguration---------
RestTemplate-ConnectTimeout: 150000
RestTemplate-ReadTimeout: 150000

#-----------------------日志设置---------------------------
log:
  path: D:/spring_log/wms
  level: DEBUG

#-----------------------mybatis-plus 设置---------
mybatis-plus:
  configuration:
    jdbc-type-for-null: NULL
    # mybatis sql日志输出
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
    # 关闭驼峰
    map-underscore-to-camel-case: false
    # null 也返回
    call-setters-on-nulls: true
  global-config:
    db-config:
      id-type: AUTO
      insert-strategy: ALWAYS
      update-strategy: ALWAYS
  mapper-locations: classpath*:**/*Mapper.xml
  type-handlers-package: com.xinyirun.wms.core.config.mybatis.typehandlers

#-----------------------scm  Configuration---------
scm:
  avatar:
    temp-dir: ./avatar_temp
  config:
    log-print: true
    log-save-db: true
    # AOP记录用户系统日志，true开启，false关闭
    sys-log: true
    # AOP记录用户操作日志，true开启，false关闭
    operate-log: true
    # AOP记录用户操作日志: true详细日志，不区分更改前更改后，数据量较大，false简单日志，只记录当前变更过的数据，数据量较小
    operate-log-all: true
    # 错误日志输出简单模式
    simple-model: true
    # 文件上传url
    fs-url: http://file.xinyirunscm.com/fs/api/service/v1/upload
    app_key: 8a90e44e-2a14-5c02-b3a5-95a1ce3a9eb6
    secret_key: 1d7ee618-2fcb-5ec3-b0b2-d6df9115301d
    # 文件备份 webclient baseurl 设置
    fs-webclient-baseurl: http://127.0.0.1:8089

    # redis 缓存过期时间min
    redis-cache-expired-min: 60
    # 当前环境
    env: dev
    domain_name: http://localhost:19528/
  security:
    # 免认证资源路径
    anon-resources-url: /api/app/v1/wechat/login,/api/v1/staff/avatar/init,/api/v1/user/sso/**,/api/v1/materialconvert/execute,/api/app/v1/notice/get,/api/v1/user/setdnnode,/css/**,/js/**,/fonts/**,/img/**,/api/v1/imagecode,/api/v1/sms/code,/api/v1/signup/mobile,/monitoring/**,/monitoring,/actuator/monitoring,/actuator/monitoring/**,/swagger-ui/**,/v3/api-docs/**,/login/**,/api/v1/bpm/process/createstartprocess,/api/v1/bpm/callback/**
    code:
      image:
        # 验证码相关配置，以下资源需要验证图形验证码，生成图形验证码的请求 ，
        create-url: /api/v1/captcha/captchaImage
        # 验证码相关配置，图形验证码失效时间
        expire-in: 60
        # 验证码相关配置，图形验证码高度，单位 px
        height: 36
        # 验证码相关配置，图形验证码由字符位数
        length: 4
        # 验证码相关配置，以下资源需要验证图形验证码，对应图形验证码登录页面 form表单的 action属性
        login-processing-url: /api/v1/user/token/get
        # 验证码相关配置，以下资源需要验证图形验证码，哪些地址是需要图片验证码进行验证的
        url:
        # 验证码相关配置，图形验证码图片长度，单位 px
        width: 148
        # 支持字符验证和计算式验证：math，char
        captcha-type: math
      sms:
        # 验证码相关配置，短信验证码相关配置，以下资源需要短信验证码验证，生成短信验证码的请求 url
        create-url: /api/v1/sms/code/check
        # 验证码相关配置，短信验证码相关配置，短信验证码的有效时间，单位为秒
        expire-in: 300
        # 验证码相关配置，短信验证码相关配置，短信验证码字符位数
        length: 4
        # 验证码相关配置，短信验证码相关配置，以下资源需要短信验证码验证，对应短信验证码登录页面 form表单的 action属性
        login-processing-url: /mobile/login
        # 验证码相关配置，短信验证码相关配置，以下资源需要短信验证码验证
        url: /api/v1/sms/code/check
        # 短信运营商请求参数
        api-uri: http://222.73.117.158/msg/HttpBatchSendSM
        account: VIP-yrgyl8
        pswd: Tch922973
    # session过期后自动获取
    create-new-session: false
    # 开发者模式，可以跳过验证码
    develop-model: true
    # 首页路径
    index-url: /index
    # 登录路径
    login-url: /login
    # 登出路径
    logout-url: /api/v1/logout
    # 记住我有效时间，单位为秒
    remember-me-timeout: 3600
    session:
      # 同一个账号最大并发登录数量，超出这个数量后，后者踢掉前者
      maximum-sessions: 10
    jwt:
      header: Authorization
      # This token must be encoded using Base64 with mininum 88 Bits (you can type `echo 'secret-key'|base64` on your command line)
      base64-secret: ZmQ0ZGI5NjQ0MDQwY2I4MjMxY2Y3ZmI3MjdhN2ZmMjNhODViOTg1ZGE0NTBjMGM4NDA5NzYxMjdjOWMwYWRmZTBlZjlhNGY3ZTg4Y2U3YTE1ODVkZDU5Y2Y3OGYwZWE1NzUzNWQ2YjFjZDc0NGMxZWU2MmQ3MjY1NzJmNTE0MzI=
      # token is valid 86400:24 hours，设置为100天
      token-validity-in-seconds: 8640000000
      # valid 24 hours 100天够用了
      #      token-validity-in-seconds-for-remember-me: 86400000
      route:
        authentication:
          path: auth
          refresh: refresh
  wx:
    open:
      config:
        # 微信开放平台 AppID
        appid: wx99f5fcda3705b794
        # 微信开放平台 AppSecret
        secret: 645539b5e98e52aeed022f7936d077fe
        redirectUrl: https://www.xinyirunscm.com
        csrfKey: xinyirun
  
  #-----------------------SCM ClickHouse模块配置---------------------------
  clickhouse:
    # ClickHouse模块总开关
    enabled: true
    # ClickHouse服务端点配置
    endpoints:
      - "http://127.0.0.1:8123"
    # 数据库名称
    database: "default"
    # 认证信息
    username: "app"
    password: "app_password"
    # 压缩配置
    compress-server-response: true
    compress-client-request: false
    # 客户端配置
    client:
      buffer-size: 8192
      queue-length: 0
      use-objects-in-array: false
      use-binary-string: false
      widen-unsigned-types: false
    # 超时配置（毫秒）
    timeout:
      connection: 30000
      query: 60000
      socket: 60000
      max-execution-time: 300
    # 重试配置
    retry:
      max-attempts: 3
      delay: 1000
      multiplier: 2.0
    # 监控配置
    monitoring:
      health-check-enabled: true
      health-check-interval: 30
      metrics-enabled: true
    # 性能配置
    performance:
      max-connections: 20
      lz4-uncompressed-buffer-size: 1048576  # 1MB
      socket-receive-buffer-size: 1000000    # 1MB
      client-network-buffer-size: 1000000    # 1MB
      warmup-connections: true
      warmup-timeout-seconds: 10
      preferred-format: "RowBinaryWithNamesAndTypes"

  #-----------------------SCM AI模块自定义配置---------------------------
  ai:
    # AI模块总开关
    enabled: true
    
    # 默认使用的AI提供商
    default-provider: openai  # 使用DeepSeek（通过OpenAI兼容API）
    
    # 向量存储配置（后续扩展）
    vector:
      enabled: false
      type: redis  # 可选: redis, elasticsearch, pgvector
    
    # 工作流引擎配置
    workflow:
      enabled: false
      max-concurrent-tasks: 10
      task-timeout: 300000  # 5分钟
    
    # 智能分析配置
    analytics:
      enabled: false
      cache-results: true
      cache-ttl: 3600  # 1小时
    
    # 模型管理配置
    model:
      auto-select: true  # 自动选择最优模型
      fallback-enabled: true  # 启用失败降级
      fallback-order: [zhipuai, dashscope, baidu, tencent]

##################################################################################重要--避免为了在ActivitiConfig中写死############################################################################################
##### db-Type  只有如下可选值,flowable源码并未对这里进行忽略大小写判断,所以我们新增一个配置项来进行配置,防止有人写大写的情况
workflow:
  #  public static final String DATABASE_TYPE_H2 = "h2";
  #  public static final String DATABASE_TYPE_HSQL = "hsql";
  #  public static final String DATABASE_TYPE_MYSQL = "mysql";
  #  public static final String DATABASE_TYPE_ORACLE = "oracle";
  #  public static final String DATABASE_TYPE_POSTGRES = "postgres";
  #  public static final String DATABASE_TYPE_MSSQL = "mssql";
  #  public static final String DATABASE_TYPE_DB2 = "db2";
  #  public static final String DATABASE_TYPE_COCKROACHDB = "cockroachdb";
  db-type: mysql
  email-host: xxx.qq.com
  email-password: xxxx
  email-addr: xxx.qq.com
  email-port: 25

flowable:
  dmn:
    enabled: false
  cmmn:
    enabled: false
  idm:
    enabled: false
  async-history-executor-activate: false
  async-executor-activate: false
  check-process-definitions: false
  content:
    enabled: false
  app:
    enabled: false
  eventregistry:
    enabled: false