<?xml version="1.0" encoding="UTF-8"?>
<!-- 日志级别从低到高分为TRACE < DEBUG < INFO < WARN < ERROR < FATAL，如果设置为WARN，则低于WARN的信息都不会输出 -->
<!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true -->
<!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
<!-- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration debug="true" scan="true" scanPeriod="10 seconds">
    <springProperty scope="context" name="logPath" source="log.path"/>
    <springProperty scope="context" name="logLevel" source="log.level"/>
    <!--<include resource="org/springframework/boot/logging/logback/base.xml" />-->

    <contextName>logback</contextName>
    <!-- name的值是变量的名称，value的值时变量定义的值。通过定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量。 -->
    <property name="log.path" value="${logPath}" />
    <property name="log.level" value="${logLevel}" />
    <!-- 租户ID变量，使用SiftingAppender动态分离日志 -->
    <property name="tenant_code" value="master" />
    <!-- 彩色日志 -->
    <!-- 彩色日志依赖的渲染类 -->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter" />
    <conversionRule conversionWord="wex" converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter" />
    <conversionRule conversionWord="wEx" converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter" />
    <!-- 彩色日志格式 -->
    <property name="CONSOLE_LOG_PATTERN" value="${CONSOLE_LOG_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>


    <!--输出到控制台-->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>
        </filter>
        <encoder>
            <Pattern>${CONSOLE_LOG_PATTERN}</Pattern>
            <!-- 设置字符集 -->
            <charset>UTF-8</charset>
        </encoder>
    </appender>


    <!--输出到文件-->

    <!-- 按租户分离的DEBUG日志 -->
    <appender name="DEBUG_FILE" class="ch.qos.logback.classic.sift.SiftingAppender">
        <!-- 添加超时配置，避免并发冲突 -->
        <timeout>30000</timeout>
        <discriminator class="ch.qos.logback.classic.sift.MDCBasedDiscriminator">
            <key>tenant_code</key>
            <defaultValue>master</defaultValue>
        </discriminator>
        <sift>
            <appender name="DEBUG_FILE_${tenant_code}" class="ch.qos.logback.core.rolling.RollingFileAppender">
                <file>${logPath}/tenants/${tenant_code}/debug.log</file>
                <encoder>
                    <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
                    <charset>UTF-8</charset>
                </encoder>
                <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
                    <fileNamePattern>${logPath}/tenants/${tenant_code}/debug/log-debug-%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
                    <maxFileSize>500MB</maxFileSize>
                    <maxHistory>60</maxHistory>
                </rollingPolicy>
                <filter class="ch.qos.logback.classic.filter.LevelFilter">
                    <level>DEBUG</level>
                    <onMatch>ACCEPT</onMatch>
                    <onMismatch>DENY</onMismatch>
                </filter>
            </appender>
        </sift>
    </appender>

    <!-- 按租户分离的INFO日志 -->
    <appender name="INFO_FILE" class="ch.qos.logback.classic.sift.SiftingAppender">
        <!-- 添加超时配置，避免并发冲突 -->
        <timeout>30000</timeout>
        <discriminator class="ch.qos.logback.classic.sift.MDCBasedDiscriminator">
            <key>tenant_code</key>
            <defaultValue>master</defaultValue>
        </discriminator>
        <sift>
            <appender name="INFO_FILE_${tenant_code}" class="ch.qos.logback.core.rolling.RollingFileAppender">
                <file>${logPath}/tenants/${tenant_code}/info.log</file>
                <encoder>
                    <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
                    <charset>UTF-8</charset>
                </encoder>
                <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
                    <fileNamePattern>${logPath}/tenants/${tenant_code}/info/log-info-%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
                    <maxFileSize>500MB</maxFileSize>
                    <maxHistory>60</maxHistory>
                </rollingPolicy>
                <filter class="ch.qos.logback.classic.filter.LevelFilter">
                    <level>INFO</level>
                    <onMatch>ACCEPT</onMatch>
                    <onMismatch>DENY</onMismatch>
                </filter>
            </appender>
        </sift>
    </appender>

    <!-- 按租户分离的WARN日志 -->
    <appender name="WARN_FILE" class="ch.qos.logback.classic.sift.SiftingAppender">
        <!-- 添加超时配置，避免并发冲突 -->
        <timeout>30000</timeout>
        <discriminator class="ch.qos.logback.classic.sift.MDCBasedDiscriminator">
            <key>tenant_code</key>
            <defaultValue>master</defaultValue>
        </discriminator>
        <sift>
            <appender name="WARN_FILE_${tenant_code}" class="ch.qos.logback.core.rolling.RollingFileAppender">
                <file>${logPath}/tenants/${tenant_code}/warn.log</file>
                <encoder>
                    <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
                    <charset>UTF-8</charset>
                </encoder>
                <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
                    <fileNamePattern>${logPath}/tenants/${tenant_code}/warn/log-warn-%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
                    <maxFileSize>500MB</maxFileSize>
                    <maxHistory>60</maxHistory>
                </rollingPolicy>
                <filter class="ch.qos.logback.classic.filter.LevelFilter">
                    <level>WARN</level>
                    <onMatch>ACCEPT</onMatch>
                    <onMismatch>DENY</onMismatch>
                </filter>
            </appender>
        </sift>
    </appender>


    <!-- 按租户分离的ERROR日志 -->
    <appender name="ERROR_FILE" class="ch.qos.logback.classic.sift.SiftingAppender">
        <!-- 添加超时配置，避免并发冲突 -->
        <timeout>30000</timeout>
        <discriminator class="ch.qos.logback.classic.sift.MDCBasedDiscriminator">
            <key>tenant_code</key>
            <defaultValue>master</defaultValue>
        </discriminator>
        <sift>
            <appender name="ERROR_FILE_${tenant_code}" class="ch.qos.logback.core.rolling.RollingFileAppender">
                <file>${logPath}/tenants/${tenant_code}/error.log</file>
                <encoder>
                    <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
                    <charset>UTF-8</charset>
                </encoder>
                <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
                    <fileNamePattern>${logPath}/tenants/${tenant_code}/error/log-error-%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
                    <maxFileSize>500MB</maxFileSize>
                    <maxHistory>60</maxHistory>
                </rollingPolicy>
                <filter class="ch.qos.logback.classic.filter.LevelFilter">
                    <level>ERROR</level>
                    <onMatch>ACCEPT</onMatch>
                    <onMismatch>DENY</onMismatch>
                </filter>
            </appender>
        </sift>
    </appender>
    <logger name="org.springframework.web" level="${logLevel}"/>
    <logger name="org.springframework.security" level="${logLevel}"/>
    <logger name="org.springframework" level="${logLevel}"/>
    <logger name="org.springframework.data.mybatis" level="${logLevel}"/>
    <logger name="org.springframework.aop.aspectj" level="ERROR"/>
    <logger name="org.springframework.cache" level="${logLevel}"/>
    <logger name="javax.activation" level="WARN"/>
    <logger name="javax.mail" level="WARN"/>
    <logger name="javax.xml.bind" level="WARN"/>
    <logger name="ch.qos.logback" level="INFO"/>
    <logger name="net.sf.ehcache" level="WARN"/>
    <logger name="org.apache" level="WARN"/>
    <logger name="org.apache.catalina.startup.DigesterFactory" level="OFF"/>
    <logger name="org.bson" level="WARN"/>
    <logger name="org.hibernate.validator" level="WARN"/>
    <logger name="org.hibernate" level="${logLevel}"/>
    <logger name="org.hibernate.ejb.HibernatePersistence" level="OFF"/>
    <logger name="org.thymeleaf" level="WARN"/>
    <logger name="org.xnio" level="WARN"/>
    <logger name="com.xinyirun.scm" level="${logLevel}"/>
    <logger name="sun.rmi" level="WARN"/>
    <logger name="liquibase" level="WARN"/>
    <logger name="sun.rmi.transport" level="WARN"/>
    <logger name="jdbc.connection" level="ERROR"/>
    <logger name="jdbc.resultset" level="ERROR"/>
    <logger name="jdbc.resultsettable" level="INFO"/>
    <logger name="jdbc.audit" level="ERROR"/>
    <logger name="jdbc.sqltiming" level="ERROR"/>
    <logger name="jdbc.sqlonly" level="INFO"/>
    <!--
        <logger>用来设置某一个包或者具体的某一个类的日志打印级别、
        以及指定<appender>。<logger>仅有一个name属性，
        一个可选的level和一个可选的addtivity属性。
        name:用来指定受此logger约束的某一个包或者具体的某一个类。
        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，
              还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。
              如果未设置此属性，那么当前logger将会继承上级的级别。
        addtivity:是否向上级logger传递打印信息。默认是true。
    -->
    <!--<logger name="org.springframework.web" level="info"/>-->
    <!--<logger name="org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor" level="INFO"/>-->
    <!--
        使用mybatis的时候，sql语句是debug下才会打印，而这里我们只配置了info，所以想要查看sql语句的话，有以下两种操作：
        第一种把<root level="info">改成<root level="DEBUG">这样就会打印sql，不过这样日志那边会出现很多其他消息
        第二种就是单独给dao下目录配置debug模式，代码如下，这样配置sql语句会打印，其他还是正常info级别：
     -->


    <!--
        root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性
        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，
        不能设置为INHERITED或者同义词NULL。默认是DEBUG
        可以包含零个或多个元素，标识这个appender将会添加到这个logger。
    -->

    <!-- 异步输出 -->
    <appender name ="ASYNC_DEBUG_FILE" class= "ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold >0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>1024</queueSize>
        <includeCallerData>false</includeCallerData>
        <!-- 添加非阻塞模式，减少等待时间 -->
        <neverBlock>true</neverBlock>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref ="DEBUG_FILE"/>
    </appender>
    <appender name ="ASYNC_INFO_FILE" class= "ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold >0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>1024</queueSize>
        <includeCallerData>false</includeCallerData>
        <!-- 添加非阻塞模式，减少等待时间 -->
        <neverBlock>true</neverBlock>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref ="INFO_FILE"/>
    </appender>
    <appender name ="ASYNC_WARN_FILE" class= "ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold >0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>512</queueSize>
        <includeCallerData>true</includeCallerData>
        <!-- WARN级别保持阻塞模式，确保重要日志不丢失 -->
        <neverBlock>false</neverBlock>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref ="WARN_FILE"/>
    </appender>
    <appender name ="ASYNC_ERROR_FILE" class= "ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold >0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>512</queueSize>
        <includeCallerData>true</includeCallerData>
        <!-- ERROR级别保持阻塞模式，确保重要日志不丢失 -->
        <neverBlock>false</neverBlock>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref ="ERROR_FILE"/>
    </appender>

    <!--    测试环境:输出到文件-->
    <!--    <springProfile name="">-->
    <!--        <root level="${logLevel}">-->
    <!--            <appender-ref ref="CONSOLE" />-->
    <!--            <appender-ref ref="ASYNC_DEBUG_FILE" />-->
    <!--            <appender-ref ref="ASYNC_INFO_FILE" />-->
    <!--            <appender-ref ref="ASYNC_ERROR_FILE" />-->
    <!--            <appender-ref ref="ASYNC_WARN_FILE" />-->
    <!--        </root>-->
    <!--    </springProfile>-->
    <!--开发环境:打印控制台-->
    <springProfile name="test1 | test2 | dev | dlprod | hdprod | centos-ys2 | qrprod">
        <root level="${logLevel}">
            <appender-ref ref="CONSOLE" />
            <appender-ref ref="ASYNC_DEBUG_FILE" />
            <appender-ref ref="ASYNC_INFO_FILE" />
            <appender-ref ref="ASYNC_WARN_FILE" />
            <appender-ref ref="ASYNC_ERROR_FILE" />
        </root>
    </springProfile>
    <springProfile name="centos-ys | centos-dev | centos-ys-app | hdprod | centos-ys2 | qrprod">
        <root level="${logLevel}">
            <appender-ref ref="CONSOLE" />
            <appender-ref ref="ASYNC_DEBUG_FILE" />
            <appender-ref ref="ASYNC_INFO_FILE" />
            <appender-ref ref="ASYNC_ERROR_FILE" />
            <appender-ref ref="ASYNC_WARN_FILE" />
        </root>
    </springProfile>

    <!--    生产环境:输出到文件-->
    <springProfile name="zlprod | prod | hdprod | centos-ys2 | qrprod">
        <root level="${logLevel}">
            <appender-ref ref="ASYNC_DEBUG_FILE" />
            <appender-ref ref="ASYNC_INFO_FILE" />
            <appender-ref ref="ASYNC_ERROR_FILE" />
            <appender-ref ref="ASYNC_WARN_FILE" />
        </root>
    </springProfile>

</configuration>