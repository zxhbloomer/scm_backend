<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xinyirun.scm.ai.core.mapper.chat.AiConfigMapper">

    <resultMap id="BaseResultMap" type="com.xinyirun.scm.ai.bean.domain.AiConfig">
        <id column="id" jdbcType="VARCHAR" property="id" />
        <result column="config_key" jdbcType="VARCHAR" property="configKey" />
        <result column="config_value" jdbcType="VARCHAR" property="configValue" />
        <result column="description" jdbcType="VARCHAR" property="description" />
        <result column="tenant" jdbcType="VARCHAR" property="tenant" />
        <result column="create_time" jdbcType="BIGINT" property="createTime" />
        <result column="update_time" jdbcType="BIGINT" property="updateTime" />
    </resultMap>

    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>

    <sql id="Base_Column_List">
        id, config_key, config_value, description, tenant, create_time, update_time
    </sql>

    <!-- 根据配置键查询配置 -->
    <select id="selectByConfigKey" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List" />
        FROM ai_config
        WHERE config_key = #{configKey,jdbcType=VARCHAR}
        LIMIT 1
    </select>

    <!-- 根据配置类型查询配置列表 -->
    <select id="selectByConfigType" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List" />
        FROM ai_config
        WHERE tenant = #{tenant,jdbcType=VARCHAR}
        ORDER BY config_key
    </select>

    <!-- 获取所有激活的配置 -->
    <select id="selectActiveConfigs" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List" />
        FROM ai_config
        ORDER BY tenant, config_key
    </select>

    <!-- 根据配置键列表批量查询 -->
    <select id="selectByConfigKeys" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List" />
        FROM ai_config
        WHERE config_key IN
        <foreach close=")" collection="configKeys" item="key" open="(" separator=",">
            #{key,jdbcType=VARCHAR}
        </foreach>
        ORDER BY config_key
    </select>

    <!-- 更新配置值 -->
    <update id="updateConfigValue">
        UPDATE ai_config
        SET config_value = #{configValue,jdbcType=LONGVARCHAR},
            update_time = #{updateTime,jdbcType=BIGINT}
        WHERE config_key = #{configKey,jdbcType=VARCHAR}
    </update>

    <!-- 批量更新配置状态 -->
    <update id="updateConfigStatus">
        UPDATE ai_config
        SET is_active = #{isActive,jdbcType=TINYINT},
            update_time = #{updateTime,jdbcType=BIGINT}
        WHERE config_key IN
        <foreach close=")" collection="configKeys" item="key" open="(" separator=",">
            #{key,jdbcType=VARCHAR}
        </foreach>
    </update>

    <!-- 标准MyBatis生成的方法 -->
    <select id="selectByExample" parameterType="com.xinyirun.scm.ai.bean.domain.AiConfigExample" resultMap="BaseResultMap">
        SELECT
        <if test="distinct">distinct</if>
        <include refid="Base_Column_List" />
        FROM ai_config
        <if test="_parameter != null">
            <include refid="Example_Where_Clause" />
        </if>
        <if test="orderByClause != null">
            ORDER BY ${orderByClause}
        </if>
    </select>

    <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List" />
        FROM ai_config
        WHERE id = #{id,jdbcType=VARCHAR}
    </select>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
        DELETE FROM ai_config
        WHERE id = #{id,jdbcType=VARCHAR}
    </delete>

    <delete id="deleteByExample" parameterType="com.xinyirun.scm.ai.bean.domain.AiConfigExample">
        DELETE FROM ai_config
        <if test="_parameter != null">
            <include refid="Example_Where_Clause" />
        </if>
    </delete>

    <insert id="insert" parameterType="com.xinyirun.scm.ai.bean.domain.AiConfig">
        INSERT INTO ai_config (id, config_key, config_value, config_type, description,
            is_active, create_time, update_time)
        VALUES (#{id,jdbcType=VARCHAR}, #{configKey,jdbcType=VARCHAR}, #{configValue,jdbcType=LONGVARCHAR},
            #{configType,jdbcType=VARCHAR}, #{description,jdbcType=VARCHAR}, #{isActive,jdbcType=TINYINT},
            #{createTime,jdbcType=BIGINT}, #{updateTime,jdbcType=BIGINT})
    </insert>

    <insert id="insertSelective" parameterType="com.xinyirun.scm.ai.bean.domain.AiConfig">
        INSERT INTO ai_config
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">id,</if>
            <if test="configKey != null">config_key,</if>
            <if test="configValue != null">config_value,</if>
            <if test="configType != null">config_type,</if>
            <if test="description != null">description,</if>
            <if test="isActive != null">is_active,</if>
            <if test="createTime != null">create_time,</if>
            <if test="updateTime != null">update_time,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">#{id,jdbcType=VARCHAR},</if>
            <if test="configKey != null">#{configKey,jdbcType=VARCHAR},</if>
            <if test="configValue != null">#{configValue,jdbcType=LONGVARCHAR},</if>
            <if test="configType != null">#{configType,jdbcType=VARCHAR},</if>
            <if test="description != null">#{description,jdbcType=VARCHAR},</if>
            <if test="isActive != null">#{isActive,jdbcType=TINYINT},</if>
            <if test="createTime != null">#{createTime,jdbcType=BIGINT},</if>
            <if test="updateTime != null">#{updateTime,jdbcType=BIGINT},</if>
        </trim>
    </insert>

    <select id="countByExample" parameterType="com.xinyirun.scm.ai.bean.domain.AiConfigExample" resultType="java.lang.Long">
        SELECT COUNT(*) FROM ai_config
        <if test="_parameter != null">
            <include refid="Example_Where_Clause" />
        </if>
    </select>

    <update id="updateByExampleSelective" parameterType="map">
        UPDATE ai_config
        <set>
            <if test="record.id != null">id = #{record.id,jdbcType=VARCHAR},</if>
            <if test="record.configKey != null">config_key = #{record.configKey,jdbcType=VARCHAR},</if>
            <if test="record.configValue != null">config_value = #{record.configValue,jdbcType=LONGVARCHAR},</if>
            <if test="record.configType != null">config_type = #{record.configType,jdbcType=VARCHAR},</if>
            <if test="record.description != null">description = #{record.description,jdbcType=VARCHAR},</if>
            <if test="record.isActive != null">is_active = #{record.isActive,jdbcType=TINYINT},</if>
            <if test="record.createTime != null">create_time = #{record.createTime,jdbcType=BIGINT},</if>
            <if test="record.updateTime != null">update_time = #{record.updateTime,jdbcType=BIGINT},</if>
        </set>
        <if test="_parameter != null">
            <include refid="Example_Where_Clause" />
        </if>
    </update>

    <update id="updateByExample" parameterType="map">
        UPDATE ai_config
        SET id = #{record.id,jdbcType=VARCHAR},
        config_key = #{record.configKey,jdbcType=VARCHAR},
        config_value = #{record.configValue,jdbcType=LONGVARCHAR},
        config_type = #{record.configType,jdbcType=VARCHAR},
        description = #{record.description,jdbcType=VARCHAR},
        is_active = #{record.isActive,jdbcType=TINYINT},
        create_time = #{record.createTime,jdbcType=BIGINT},
        update_time = #{record.updateTime,jdbcType=BIGINT}
        <if test="_parameter != null">
            <include refid="Example_Where_Clause" />
        </if>
    </update>

    <update id="updateByPrimaryKeySelective" parameterType="com.xinyirun.scm.ai.bean.domain.AiConfig">
        UPDATE ai_config
        <set>
            <if test="configKey != null">config_key = #{configKey,jdbcType=VARCHAR},</if>
            <if test="configValue != null">config_value = #{configValue,jdbcType=LONGVARCHAR},</if>
            <if test="configType != null">config_type = #{configType,jdbcType=VARCHAR},</if>
            <if test="description != null">description = #{description,jdbcType=VARCHAR},</if>
            <if test="isActive != null">is_active = #{isActive,jdbcType=TINYINT},</if>
            <if test="createTime != null">create_time = #{createTime,jdbcType=BIGINT},</if>
            <if test="updateTime != null">update_time = #{updateTime,jdbcType=BIGINT},</if>
        </set>
        WHERE id = #{id,jdbcType=VARCHAR}
    </update>

    <update id="updateByPrimaryKey" parameterType="com.xinyirun.scm.ai.bean.domain.AiConfig">
        UPDATE ai_config
        SET config_key = #{configKey,jdbcType=VARCHAR},
        config_value = #{configValue,jdbcType=LONGVARCHAR},
        config_type = #{configType,jdbcType=VARCHAR},
        description = #{description,jdbcType=VARCHAR},
        is_active = #{isActive,jdbcType=TINYINT},
        create_time = #{createTime,jdbcType=BIGINT},
        update_time = #{updateTime,jdbcType=BIGINT}
        WHERE id = #{id,jdbcType=VARCHAR}
    </update>

</mapper>