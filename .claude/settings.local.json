{
  "env": {
    "MAX_THINKING_TOKENS": "31999",
    "CLAUDE_CODE_MAX_OUTPUT_TOKENS": "32000"
  },
  "permissions": {
    "allow": [
      "Bash(powershell:*)",
      "Bash(.specify/scripts/powershell/check-prerequisites.ps1 -Json -RequireTasks -IncludeTasks)",
      "Bash(git tag:*)",
      "Bash(mvn test:*)",
      "mcp__mysql__execute_sql",
      "Bash(mvn install:*)",
      "Read(//d/2025_project/20_project_in_github/00_scm_backend/bak/20250927/scm-ai/src/main/java/com/xinyirun/scm/ai/controller/model/**)",
      "Read(//d/2025_project/20_project_in_github/00_scm_backend/bak/20250927/scm-ai/src/main/java/com/xinyirun/scm/ai/bean/domain/**)",
      "Read(//d/2025_project/20_project_in_github/00_scm_backend/bak/20250927/scm-ai/**)",
      "Bash(javac:*)",
      "Bash(mvn clean:*)",
      "Bash(mvn compile:*)",
      "Bash(mvn:*)",
      "Bash(del /f \"D:\\2025_project\\20_project_in_github\\00_scm_backend\\scm_backend\\scm-ai\\src\\main\\java\\com\\xinyirun\\scm\\ai\\util\\SessionUtils.java\")",
      "mcp__context7__resolve-library-id",
      "mcp__context7__get-library-docs",
      "mcp__serena__find_symbol",
      "mcp__serena__search_for_pattern",
      "Bash(git rm:*)",
      "Bash(git add:*)",
      "Bash(git checkout:*)",
      "Bash(git branch:*)",
      "mcp__serena__list_dir",
      "Bash(tree:*)",
      "mcp__mysql__list_tables",
      "mcp__serena__activate_project",
      "mcp__dthink__sequentialthinking",
      "Read(//d/**)",
      "Bash(.specify/scripts/powershell/check-prerequisites.ps1 -Json -PathsOnly)",
      "Bash(powershell.exe:*)",
      "Bash(dir:*)",
      "Bash(find:*)",
      "Bash(cd:*)",
      "Bash(git push:*)",
      "Bash(git log:*)",
      "Bash(git remote:*)",
      "Bash(.specify/scripts/powershell/create-new-feature.ps1 -Json \"需求，在scm-ai的代码D:\\2025_project\\20_project_in_github\\00_scm_backend\\scm_backend\\scm-ai\\src，找到所有mapper.java的代码，找到哪些全部insert into 和 update 的代码，注意关于插入、和更新都要使用bean操作，查询要使用sql。插入、和更新都要使用bean操作，查询要使用sql。插入操作，使用实体类，set数据，c_time、u_time、c_id、u_id、dbversion，这4个字段不需要，然后调用mapper.insert(实体类)操作，如果需要的到返回的数据，调用mapper.insert后，这个实体类就是数据。更新操作，由于需要使用bean的操作，不是使用sql来更新，所以需要先select出来数据，最好是使用mapper.selectById 得到整个实体类，然后更新实体类的数据（set方法），然后使用mapper.updateById来更新，你要找出所有关于更新的操作，然后按此方法逻辑来处理。列清单。具体你可以参考，scm-core中插入数据和更新数据的操作\")",
      "mcp__serena__check_onboarding_performed",
      "Bash(ls:*)",
      "SlashCommand(/specify ai chat 日志记录，按这个方案来设计)",
      "mcp__clickhouse__list_tables",
      "mcp__serena__find_file"
    ],
    "deny": [],
    "ask": []
  },
  "enableAllProjectMcpServers": true,
  "enabledMcpjsonServers": [
    "shared-tools"
  ]
}